[  
  {
    "Summary": "5 Access Control",
    "Status": "Done",
    "Project": "CIA",
    "Type": "Epic",
    "children": [
      {
        "Summary": "5.1 Configure SSH Server",
        "Status": "Done",
        "Description": "Secure Shell (SSH) is a secure, encrypted replacement for common login services such as telnet, ftp, rlogin, rsh, and rcp. It is strongly recommended that sites abandon older clear-text login protocols and use SSH to prevent session hijacking and sniffing of sensitive data off the network.",
        "Project": "CIA",
        "Type": "Story",
        "children": [
          {
            "Summary": "5.1.1 Ensure Permissions on /etc/ssh/sshd_config are configured",
            "status": "Done",
            "Description": "The file /etc/ssh/sshd_config, and files ending in .conf in the /etc/ssh/sshd_config.d directory, contain configuration specifications for sshd.",
            "Project": "CIA",
            "Check_Type": "sshd_config",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.2 Ensure permissions on SSH private host key files are configured",
            "status": "Done",
            "Description": "An SSH private key is one of two files used in SSH public key authentication. In this authentication method, the possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.",
            "Project": "CIA",
            "Check_Type": "ssh_priv",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.3 Ensure permissions on SSH public host key files are configured",
            "status": "Done",
            "Description": "An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public key that corresponds to a private key will be able to authenticate successfully.",
            "Project": "CIA",
            "Check_Type": "SSH_pub",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.4 Ensure sshd access is configured",
            "status": "Done",
            "Description": "To control SSH access, system administrators can use `AllowUsers` or `AllowGroups` to explicitly permit specific users or groups, or `DenyUsers` or `DenyGroups` to block certain users or groups from logging in, with support for restricting by host using the `user@host` format.",
            "Project": "CIA",
            "Check_Type": "ssh_access",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.5 Ensure sshd Banner is configured",
            "status": "Done",
            "Description": "The Banner parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By default, no banner is displayed.",
            "Project": "CIA",
            "Check_Type": "ssh_banner",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.6 Ensure sshd Ciphers are configured",
            "status": "Done",
            "Description": "This variable limits the ciphers that SSH can use during communication.",
            "Project": "CIA",
            "Check_Type": "ssh_cipher",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.7 Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured",
            "status": "Done",
            "Description": "To clarify, the two settings described below are only meant for idle connections from a protocol perspective and are not meant to check if the user is active or not. An idle user does not mean an idle connection. SSH does not and never had, intentionally, the capability to drop idle users. In SSH versions before 8.2p1 there was a bug that caused these values to behave in such a manner that they were abused to disconnect idle users. This bug has been resolved in 8.2p1 and thus it can no longer be abused disconnect idle users.",
            "Project": "CIA",
            "Check_Type": "ssh_client_alive",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.8 Ensure sshd DisableForwarding is enabled",
            "status": "Done",
            "Description": "The DisableForwarding parameter disables all forwarding features, including X11, ssh-agent(1), TCP and StreamLocal. This option overrides all other forwarding-related options and may simplify restricted configurations.",
            "Project": "CIA",
            "Check_Type": "ssh_forwarding",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.9 Ensure sshd GSSAPIAuthentication is disabled",
            "status": "Done",
            "Description": "The GSSAPIAuthentication parameter specifies whether user authentication based on GSSAPI is allowed",
            "Project": "CIA",
            "Check_Type": "ssh_GSSAPIA",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.10 Ensure sshd HostbasedAuthentication is disabled",
            "status": "Done",
            "Description": "The HostbasedAuthentication parameter specifies if authentication is allowed through trusted hosts via the user of .rhosts, or /etc/hosts.equiv, along with successful public key client host authentication.",
            "Project": "CIA",
            "Check_Type": "ssh_hostbasedauthentication",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.11 Ensure sshd IgnoreRhosts is enabled",
            "status": "Done",
            "Description": "The IgnoreRhosts parameter specifies that .rhosts and .shosts files will not be used in RhostsRSAAuthentication or HostbasedAuthentication.",
            "Project": "CIA",
            "Check_Type": "ssh_ignorerhosts",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.12 Ensure sshd KexAlgorithms is configured",
            "status": "Done",
            "Description": "Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages, each must be equipped to encrypt messages to be sent and decrypt messages received",
            "Project": "CIA",
            "Check_Type": "ssh_algorithms",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.13 Ensure sshd LoginGraceTime is configured",
            "status": "Done",
            "Description": "The LoginGraceTime parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should be limited to appropriate organizational limits to ensure the service is available for needed access.",
            "Project": "CIA",
            "Check_Type": "ssh_grace",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.14 Ensure sshd LogLevel is configured",
            "status": "Done",
            "Description": "SSH provides several logging levels with varying amounts of verbosity. The DEBUG options are specifically not recommended other than strictly for debugging SSH communications. These levels provide so much data that it is difficult to identify important security information, and may violate the privacy of users.",
            "Project": "CIA",
            "Check_Type": "ssh_loglevel",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.15 Ensure sshd MACs are configured",
            "status": "Done",
            "Description": "This variable limits the types of MAC algorithms that SSH can use during communication.",
            "Project": "CIA",
            "Check_Type": "ssh_mac",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.16 Ensure sshd MaxAuthTries is configured",
            "status": "Done",
            "Description": "The MaxAuthTries parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure count reaches half the number, error messages will be written to the syslog file detailing the login failure.",
            "Project": "CIA",
            "Check_Type": "ssh_maxauthtries",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.17 Ensure sshd MaxSessions is configured",
            "status": "Done",
            "Description": "The MaxSessions parameter specifies the maximum number of open sessions permitted from a given connection.",
            "Project": "CIA",
            "Check_Type": "ssh_maxsession",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.18 Ensure sshd MaxStartups is configured",
            "status": "Done",
            "Description": "The MaxStartups parameter specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.",
            "Project": "CIA",
            "Check_Type": "ssh_maxstartups",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.19 Ensure sshd PermitEmptyPasswords is disabled",
            "status": "Done",
            "Description": "The PermitEmptyPasswords parameter specifies if the SSH server allows login to accounts with empty password strings.",
            "Project": "CIA",
            "Check_Type": "ssh_permitemptypasswords",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.20 Ensure sshd PermitRootLogin is disabled",
            "status": "Done",
            "Description": "The PermitRootLogin parameter specifies if the root user can log in using SSH. The default is prohibit-password.",
            "Project": "CIA",
            "Check_Type": "ssh_permitrootlogin",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.21 Ensure sshd PermitUserEnvironment is disabled",
            "status": "Done",
            "Description": "The PermitUserEnvironment option allows users to present environment options to the SSH daemon.",
            "Project": "CIA",
            "Check_Type": "ssh_permituserenvironmnent",
            "Type": "Subtask"
          },
          {
            "Summary": "5.1.22 Ensure sshd UsePAM is enabled",
            "status": "Done",
            "Description": "The UsePAM directive enables the Pluggable Authentication Module (PAM) interface. If set to yes this will enable PAM authentication using ChallengeResponseAuthentication and PasswordAuthentication directives in addition to PAM account and session module processing for all authentication types.",
            "Project": "CIA",
            "Check_Type": "ssh_usepam",
            "Type": "Subtask"
          }
        ]
      },
      {
        "Summary": "5.2 Configure privilege escalation",
        "Status": "Done",
        "Description": "There are various tools which allows a permitted user to execute a command as the superuser or another user, as specified by the security policy.",
        "Project": "CIA",
        "Type": "Story",
        "children": [
          {
            "Summary": "5.2.1 Ensure sudo is installed",
            "status": "Done",
            "Description": "sudo allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy.",
            "Project": "CIA",
            "Check_Type": "sudo_installed",
            "Type": "Subtask"
          },
          {
            "Summary": "5.2.2 Ensure sudo commands use pty",
            "status": "Done",
            "Description": "sudo can be configured to run only from a pseudo terminal (pseudo-pty).",
            "Project": "CIA",
            "Check_Type": "sudo_pty",
            "Type": "Subtask"
          },
          {
            "Summary": "5.2.3 Ensure sudo log file exists",
            "status": "Done",
            "Description": "sudo can use a custom log file",
            "Project": "CIA",
            "Check_Type": "sudo_log",
            "Type": "Subtask"
          },
          {
            "Summary": "5.2.4 Ensure users must provide password for privilege escalation",
            "status": "Done",
            "Description": "The operating system must be configured so that users must provide a password for privilege escalation.",
            "Project": "CIA",
            "Check_Type": "passwd_privilege",
            "Type": "Subtask"
          },
          {
            "Summary": "5.2.5 Ensure re-authentication for privilege escalation is not disabled globally",
            "status": "Done",
            "Description": "The operating system must be configured so that users must re-authenticate for privilege escalation.",
            "Project": "CIA",
            "Check_Type": "privilege_global",
            "Type": "Subtask"
          },
          {
            "Summary": "5.2.6 Ensure sudo authentication timeout is configured correctly",
            "status": "Done",
            "Description": "sudo caches used credentials for a default of 15 minutes. This is for ease of use when there are multiple administrative tasks to perform. The timeout can be modified to suit local security policies. This default is distribution specific. See audit section for further information.",
            "Project": "CIA",
            "Check_Type": "sudo_timeout",
            "Type": "Subtask"
          },
          {
            "Summary": "5.2.7 Ensure access to the su command is restricted",
            "status": "Done",
            "Description": "The su command allows a user to run a command or shell as another user. The program has been superseded by sudo, which allows for more granular control over privileged access. Normally, the su command can be executed by any user. By uncommenting the pam_wheel.so statement in /etc/pam.d/su, the su command will only allow users in a specific groups to execute su. This group should be empty to reinforce the use of sudo for privileged access.",
            "Project": "CIA",
            "Check_Type": "su_restricted",
            "Type": "Subtask"
          }
        ]
      },
      {
        "Summary": "5.3 Pluggable Authentication Modules",
        "Status": "Done",
        "Project": "CIA",
        "Type": "Epic",
        "children": [
          {
            "Summary": "5.3.1 Configure PAM software packages",
            "Status": "Done",
            "Description": "Updated versions of PAM includes additional functionality",
            "Project": "CIA",
            "Type": "Story",
            "children": [
              {
                "Summary": "5.3.1.1 Ensure latest version of pam is installed",
                "Status": "Done",
                "Description": "Updated versions of PAM include additional functionality",
                "Project": "CIA",
                "Check_Type": "latest_pam",
                "Type": "Subtask"
              },
              {
                "Summary": "5.3.1.2 Ensure libpam-modules is installed",
                "Status": "Done",
                "Description": "Pluggable Authentication Modules for PAM",
                "Project": "CIA",
                "Check_Type": "libpam-module",
                "Type": "Subtask"
              },
              {
                "Summary": "5.3.1.3 Ensure libpam-pwquality is installed",
                "Status": "Done",
                "Description": "libpwquality provides common functions for password quality checking and scoring them based on their apparent randomness. The library also provides a function for generating random passwords with good pronounceability",
                "Project": "CIA",
                "Check_Type": "libpam-pwquality",
                "Type": "Subtask"
              }
            ]
          },
          {
            "Summary": "5.3.2 Configure pam-auth-update profiles",
            "Status": "Done",
            "Description": "pam-auth-update is a utility that permits configuring the central authentication policy for the system using pre-defined profiles as supplied by PAM module packages. Profiles - Shipped in the /usr/share/pam-configs/ directory specify the modules, with options, to enable; the preferred ordering with respect to other profiles; and whether a profile should be enabled by default. Packages providing PAM modules register their profiles at install time by calling pam-auth-update --package. Selection of profiles is done using the standard debconf interface. The profile selection question will be asked at medium priority when packages are added or removed, so no user interaction is required by default. Users may invoke pam-auth-update directly to change their authentication configuration. The pam-auth-update script makes every effort to respect local changes to /etc/pam.d/common-*. Local modifications to the list of module options will be preserved, and additions of modules within the managed portion of the stack will cause pam-auth-update to treat the config files as locally modified and not make further changes to the config files unless given the --force option. If the user specifies that pam-auth-update should override local configuration changes, the locally-modified files will be saved in /etc/pam.d/ with a suffix of .pam-old.",
            "Project": "CIA",
            "Type": "Subtask",
            "children": [
              {
                "Summary": "5.3.2.1 Ensure pam_unix module is enabled",
                "Status": "Done",
                "Description": "pam_unix is the standard Unix authentication module. It uses standard calls from the system's libraries to retrieve and set account information as well as authentication. Usually this is obtained from the /etc/passwd and if shadow is enabled, the /etc/shadow file as well. The account component performs the task of establishing the status of the user's account and password based on the following shadow elements: expire, last_change, max_change, min_change, warn_change. In the case of the latter, it may offer advice to the user on changing their password or, through the PAM_AUTHTOKEN_REQD return, delay giving service to the user until they have established a new password. The entries listed above are documented in the shadow(5) manual page. Should the user's record not contain one or more of these entries, the corresponding shadow check is not performed. The authentication component performs the task of checking the users credentials (password). The default action of this module is to not permit the user access to a service if their offiCIAl password is blank",
                "Project": "CIA",
                "Check_Type": "Pam_unix",
                "Type": "Subtask"
              },
              {
                "Summary": "5.3.2.2 Ensure pam_faillock module is enabled",
                "Status": "Done",
                "Description": "The pam_faillock.so module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than the configured number of consecutive failed authentications (this is defined by the deny parameter in the faillock configuration). It stores the failure records into per-user files in the tally directory.",
                "Project": "CIA",
                "Check_Type": "pam_faillock",
                "Type": "Subtask"
              },
              {
                "Summary": "5.3.2.3 Ensure pam_pwquality module is enabled",
                "Status": "Done",
                "Description": "The pam_pwquality.so module performs password quality checking. This module can be plugged into the password stack of a given service to provide strength-checking for passwords. The code was originally based on pam_cracklib module and the module is backwards compatible with its options. The action of this module is to prompt the user for a password and check its strength against a system dictionary and a set of rules for identifying poor choices. The first action is to prompt for a single password, check its strength and then, if it is considered strong, prompt for the password a second time (to verify that it was typed correctly on the first occasion). All being well, the password is passed on to subsequent modules to be installed as the new authentication token.",
                "Project": "CIA",
                "Check_Type": "pam_pwquality",
                "Type": "Subtask"
              },
              {
                "Summary": "5.3.2.4 Ensure pam_pwhistory module is enabled",
                "Status": "Done",
                "Description": "The pam_pwhistory.so module saves the last passwords for each user in order to force password change history and keep the user from alternating between the same password too frequently. This module does not work together with kerberos. In general, it does not make much sense to use this module in conjunction with NIS or LDAP, since the old passwords are stored on the local machine and are not available on another machine for password history checking.",
                "Project": "CIA",
                "Check_Type": "pam_pwhistory",
                "Type": "Subtask"
              }
            ]
          },
          {
            "Summary": "5.3.3 Configure PAM Arguments",
            "Status": "Done",
            "Description": "Pluggable Authentication Modules (PAM) uses arguments to pass information to a pluggable module during authentication for a particular module type. These arguments allow the PAM configuration files for particular programs to use a common PAM module but in different ways. Invalid arguments are ignored and do not otherwise affect the success or failure of the PAM module. When an invalid argument is passed, an error is usually written to /var/log/messages file. However, since the reporting method is controlled by the PAM module, the module must be written correctly to log the error to this file. Note: If custom PAM files are being used, for this section's remediation, the corresponding files in /etc/pam.d/ would need to be edited directly, and the pam-auth- update --enable <EDITED_PROFILE_NAME> command skipped",
            "Project": "CIA",
            "Type": "Epic",
            "children": [
              {
                "Summary": "5.3.3.1 Configure pam_faillock module",
                "Status": "Done",
                "Description": "`pam_faillock.so` is a PAM module used to manage account lockouts after multiple failed authentication attempts. It helps protect against brute-force attacks by tracking failed logins and locking user accounts when thresholds are exceeded. By default, it stores failure records in `/var/run/faillock`, though this directory is usually cleared on reboot. To retain failure records across reboots, a different directory should be specified using the `dir=` option. The `audit` option logs failed attempts when the user isn't found, while `silent` suppresses user-facing messages. If `no_log_info` is set, the system won’t log informational messages via syslog. The `local_users_only` option ensures only users listed in `/etc/passwd` are tracked, ignoring centralized accounts (like LDAP or AD), and avoids double-lockouts. With `nodelay`, the system won’t impose a delay after failed logins. The `deny=n` option sets how many consecutive failures are allowed before locking the account, with the default being 3. The `fail_interval=n` specifies how many seconds those failures must occur within (default: 900 seconds or 15 minutes). The `unlock_time=n` option determines how long the account remains locked (default: 600 seconds or 10 minutes), with `0` meaning it stays locked until manually reset with the `faillock` command. If `even_deny_root` is set, the root account can also be locked, and `root_unlock_time=n` controls how long root stays locked. If not specified, it defaults to the `unlock_time`. The `admin_group=name` option applies root-like lockout behavior to members of the specified group.",
                "Project": "CIA",
                "Type": "Story",
                "children": [
                  {
                    "Summary": "5.3.3.1.1 Ensure password failed attempts lockout is configured",
                    "Status": "Done",
                    "Description": "The deny=<n> option will deny access if the number of consecutive authentication failures for this user during the recent interval exceeds .",
                    "Project": "CIA",
                    "Check_Type": "passwd_lockout",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.1.2 Ensure password unlock time is configured",
                    "Status": "Done",
                    "Description": "unlock_time=<n> - The access will be re-enabled after seconds after the lock out. The value 0 has the same meaning as value never - the access will not be re-enabled without resetting the faillock entries by the faillock(8) command.",
                    "Project": "CIA",
                    "Check_Type": "passwd_unlock",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.1.3 Ensure password failed attempts lockout includes root account ",
                    "Status": "Done",
                    "Description": "even_deny_root - Root account can become locked as well as regular accounts root_unlock_time=n - This option implies even_deny_root option. Allow access after n seconds to root account after the account is locked. In case the option is not specified the value is the same as of the unlock_time option.",
                    "Project": "CIA",
                    "Check_Type": "root_fail_lockout",
                    "Type": "Subtask"
                  }
                ]
              },
              {
                "Summary": "5.3.3.2 Configure pam_pwquality module",
                "Status": "Done",
                "Description": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more.",
                "Project": "CIA",
                "Type": "Story",
                "children": [
                  {
                    "Summary": "5.3.3.2.1 Ensure password number of changed characters is configured",
                    "Status": "Done",
                    "Description": "The pwquality difok option sets the number of characters in a password that must not be present in the old password.",
                    "Project": "CIA",
                    "Check_Type": "Passwd_char",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.2.2 Ensure minimum password length is configured",
                    "Status": "Done",
                    "Description": "The minimum password length setting determines the lowers number of characters that make up a password for a user account. There are many different theories about how to determine the best password length for an organization, but perhaps 'passphrase' is a better term than 'password'. The minlen option sets the minimum acceptable size for the new password (plus one if credits are not disabled which is the default). Cannot be set to lower value than 6.",
                    "Project": "CIA",
                    "Check_Type": "min_passwd",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.2.3 Ensure password complexity is configured",
                    "Status": "Done",
                    "Description": "The password complexity can be controlled using five parameters: `minclass` sets the minimum number of character types (digit, uppercase, lowercase, speCIAl) required in a password. `dcredit` defines the requirement for digits, with a negative value (e.g., -1) meaning at least one digit is required. `ucredit` works similarly for uppercase letters, `lcredit` for lowercase letters, and `ocredit` for special characters. Negative values in these credit options enforce the presence of that character type in the password.",
                    "Project": "CIA",
                    "Check_Type": "passwd_complex",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.2.4 Ensure password same consecutive characters is configured",
                    "Status": "Done",
                    "Description": "The pwquality maxrepeat option sets the maximum number of allowed same consecutive characters in a new password.",
                    "Project": "CIA",
                    "Check_Type": "passwd_conse",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.2.5 Ensure password maximum sequential characters is configured",
                    "Status": "Done",
                    "Description": "The pwquality maxsequence option sets the maximum length of monotonic character sequences in the new password. Examples of such sequence are 12345 or fedcb. The check is disabled if the value is 0. Note: Most such passwords will not pass the simplicity check unless the sequence is only a minor part of the password.",
                    "Project": "CIA",
                    "Check_Type": "passwd_max",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.2.6 Ensure password dictionary check is enabled",
                    "Status": "Done",
                    "Description": "The pwquality dictcheck option sets whether to check for the words from the cracklib dictionary.",
                    "Project": "CIA",
                    "Check_Type": "passwd_dic",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.2.7 Ensure password quality checking is enforced",
                    "Status": "Done",
                    "Description": "The pam_pwquality module can be configured to either reject a password if it fails the checks, or only print a warning. This is configured by setting the enforcing=<N> argument. If nonzero, a password will be rejected if it fails the checks, otherwise only a warning message will be provided. This setting applies only to the pam_pwquality module and possibly other applications that explicitly change their behavior based on it. It does not affect pwmake(1) and pwscore(1).",
                    "Project": "CIA",
                    "Check_Type": "passwd_quality",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.2.8 Ensure password quality is enforced for the root user",
                    "Status": "Done",
                    "Description": "If the pwquality enforce_for_root option is enabled, the module will return error on failed check even if the user changing the password is root. This option is off by default which means that just the message about the failed check is printed but root can change the password anyway. Note: The root is not asked for an old password so the checks that compare the old and new password are not performed.",
                    "Project": "CIA",
                    "Check_Type": "passwd_quality_root",
                    "Type": "Subtask"
                  }
                ]
              },
              {
                "Summary": "5.3.3.3 Configure pam_pwhistory module",
                "Status": "Done",
                "Description": "pam_pwhistory - PAM module to remember last passwords pam_history.so module - This module saves the last passwords for each user in order to force password change history and keep the user from alternating between the same password too frequently. This module does not work together with kerberos. In general, it does not make much sense to use this module in conjunction with NIS or LDAP, since the old passwords are stored on the local machine and are not available on another machine for password history checking.",
                "Project": "CIA",
                "Type": "Story",
                "children": [
                  {
                    "Summary": "5.3.3.3.1 Ensure password history remember is configured",
                    "Status": "Done",
                    "Description": "The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords. The number of passwords remembered is set via the remember argument value in set for the pam_pwhistory module.",
                    "Project": "CIA",
                    "Check_Type": "passwd_hist",
                    "Type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.3.2 Ensure password history is enforced for the root user",
                    "status": "done",
                    "Description": "If the pwhistory enforce_for_root option is enabled, the module will enforce password history for the root user as well",
                    "project": "CIA",
                    "Check_Type": "passwd_hist_root",
                    "type": "subtask"
                  },
                  {
                    "Summary": "5.3.3.3.3 Ensure pam_pwhistory includes use_authtok",
                    "status": "done",
                    "Description": "use_authtok - When password changing enforce the module to set the new password to the one provided by a previously stacked password module",
                    "project": "CIA",
                    "Check_Type": "pam_pwhistory",
                    "type": "subtask"
                  }
                ]
              },
              {
                "Summary": "5.3.3.4 Configure pam_unix module",
                "Status": "Done",
                "Description": "The pam_unix.so module is the standard Unix authentication module. It uses standard calls from the system's libraries to retrieve and set account information as well as authentication. Usually this is obtained from the /etc/passwd and the /etc/shadow file as well if shadow is enabled.",
                "Project": "CIA",
                "Type": "Story",
                "children": [
                  {
                    "Summary": "5.3.3.4.1 Ensure pam_unix does not include nullok",
                    "Status" : "Done",
                    "Description": "The nullok argument overrides the default action of pam_unix.so to not permit the user access to a service if their offiCIAl password is blank.",
                    "project": "CIA",
                    "Check_Type": "pam_unix_nullok",
                    "type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.4.2 Ensure pam_unix does not include remember",
                    "Status" : "Done",
                    "Description": "The remember=n argument saves the last n passwords for each user in /etc/security/opasswd in order to force password change history and keep the user from alternating between the same password too frequently. The MD5 password hash algorithm is used for storing the old passwords. Instead of this option the pam_pwhistory module should be used. The pam_pwhistory module saves the last n passwords for each user in /etc/security/opasswd using the password hash algorithm set on the pam_unix module. This allows for the yescrypt or sha512 hash algorithm to be used.",
                    "project": "CIA",
                    "Check_Type": "pam_unix",
                    "type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.4.3 Ensure pam_unix includes a strong password hashing algorithm",
                    "Status" : "Done",
                    "Description": "A cryptographic hash function converts an arbitrary-length input into a fixed length output. Password hashing performs a one-way transformation of a password, turning the password into another string, called the hashed password.",
                    "project": "CIA",
                    "Check_Type": "pam_unix_hashing",
                    "type": "Subtask"
                  },
                  {
                    "Summary": "5.3.3.4.4 Ensure pam_unix includes use_authtok",
                    "Status" : "Done",
                    "Description": "use_authtok - When password changing enforce the module to set the new password to the one provided by a previously stacked password module",
                    "project": "CIA",
                    "Check_Type": "pam_unix_authtok",
                    "type": "Subtask"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "Summary": "5.4 User Accounts and Environment",
        "Status" : "Done",
        "Description": "This section provides guidance on setting up secure defaults for system and user accounts and their environment.",
        "project": "CIA",
        "type": "Subtask",
        "children": [
          {
            "Summary": "5.4.1 Configure shadow password suite parameters",
            "Status" : "Done",
            "Description": "While a majority of the password control parameters have been moved to PAM, some parameters are still available through the shadow password suite. Any changes made to /etc/login.defs will only be applied if the usermod command is used. If user IDs are added a different way, use the chage command to effect changes to individual user IDs.",
            "project": "CIA",
            "type": "Subtask",
            "children": [
              {
                "Summary": "5.4.1.1 Ensure password expiration is configured",
                "Status" : "Done",
                "Description": "The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force passwords to expire once they reach a defined age. PASS_MAX_DAYS <N> - The maximum number of days a password may be used. If the password is older than this, a password change will be forced. If not specified, -1 will be assumed (which disables the restriction).",
                "project": "CIA",
                "Check_Type": "passwd_expiration",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.1.2 Ensure minimum password age is configured",
                "Status" : "Done",
                "Description": "The minimum password age determines the number of days that you must use a password before you can change it. PASS_MIN_DAYS <N> - The minimum number of days allowed between password changes. Any password changes attempted sooner than this will be rejected. If not specified, 0 will be assumed (which disables the restriction).",
                "project": "CIA",
                "Check_Type": "min_passwd_age",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.1.3 Ensure password expiration warning days is configured",
                "Status" : "Done",
                "Description": "The PASS_WARN_AGE parameter in /etc/login.defs allows an administrator to notify users that their password will expire in a defined number of days. PASS_WARN_AGE <N> - The number of days warning given before a password expires. A zero means warning is given only upon the day of expiration, a negative value means no warning is given. If not specified, no warning will be provided.",
                "project": "CIA",
                "Check_Type": "passwd_expiration_warning_days",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.1.4 Ensure strong password hashing algorithm is configured",
                "Status" : "Done",
                "Description": "A cryptographic hash function converts an arbitrary-length input into a fixed length output. Password hashing performs a one-way transformation of a password, turning the password into another string, called the hashed password. ENCRYPT_METHOD (string) - This defines the system default encryption algorithm for encrypting passwords (if no algorithm are specified on the command line).",
                "project": "CIA",
                "Check_Type": "passwd_hashing_algorithm",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.1.5 Ensure inactive password lock is configured",
                "Status" : "Done",
                "Description": "User accounts that have been inactive for over a given period of time can be automatically disabled. INACTIVE - Defines the number of days after the password exceeded its maximum age where the user is expected to replace this password. The value is stored in the shadow password file. An input of 0 will disable an expired password with no delay. An input of -1 will blank the respective field in the shadow password file.",
                "project": "CIA",
                "Check_Type": "passwd_inactive_lock",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.1.6 Ensure all users last password change date is in the past",
                "Status" : "Done",
                "Description": "All users should have a password change date in the past.",
                "project": "CIA",
                "Check_Type": "last_passwd_change",
                "type": "Subtask"
              }
            ]
          },
          {
            "Summary": "5.4.2 Configure root and system accounts and environment",
            "Status" : "Done",
            "project": "CIA",
            "type": "Subtask",
            "children": [
              {
                "Summary": "5.4.2.1 Ensure root is the only UID 0 account",
                "Status" : "Done",
                "Description": "Any account with UID 0 has superuser privileges on the system.",
                "project": "CIA",
                "Check_Type": "root_UID",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.2.2 Ensure root is the only GID 0 account",
                "Status" : "Done",
                "Description": "The usermod command can be used to specify which group the root account belongs to. This affects permissions of files that are created by the root account.",
                "project": "CIA",
                "Check_Type": "root_GID",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.2.3 Ensure group root is the only GID 0 group",
                "Status" : "Done",
                "Description": "The groupmod command can be used to specify which group the root group belongs to. This affects permissions of files that are group owned by the root group.",
                "project": "CIA",
                "Check_Type": "only_GID_root",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.2.4 Ensure root password is set (Automated)",
                "Status" : "Done",
                "Description": "There are a number of methods to access the root account directly. Without a password set any user would be able to gain access and thus control over the entire system.",
                "project": "CIA",
                "Check_Type": "root_passwd",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.2.5 Ensure root path integrity",
                "Status" : "Done",
                "Description": "The root user can execute any command on the system and could be fooled into executing programs unintentionally if the PATH is not set correctly.",
                "project": "CIA",
                "Check_Type": "root_integrity",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.2.6 Ensure root user umask is configured",
                "Status" : "Done",
                "Description": "The user file-creation mode mask (umask) is used to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (rwxrwxrwx), and for any newly created file it is 0666 (rw-rw- rw-). The umask modifies the default Linux permissions by restricting (masking) these permissions. The umask is not simply subtracted, but is processed bitwise. Bits set in the umask are cleared in the resulting file mode.",
                "project": "CIA",
                "Check_Type": "root_umask",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.2.7 Ensure system accounts do not have a valid login shell",
                "Status" : "Done",
                "Description": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell. Furthermore, a user may add speCIAl accounts that are not intended to provide an interactive shell.",
                "project": "CIA",
                "Check_Type": "system_accounts",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.2.8 Ensure accounts without a valid login shell are locked",
                "Status" : "Done",
                "Description": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell. Furthermore, a user may add speCIAl accounts that are not intended to provide an interactive shell.",
                "project": "CIA",
                "Check_Type": "shell_locked",
                "type": "Subtask"
              }
            ]
          },
          {
            "Summary": "5.4.3 Configure user default environment",
            "Status" : "Done",
            "project": "CIA",
            "type": "Subtask",
            "children": [
              {
                "Summary": "5.4.3.1 Ensure nologin is not listed in /etc/shells",
                "Status" : "Done",
                "Description": "/etc/shells is a text file which contains the full pathnames of valid login shells. This file is consulted by chsh and available to be queried by other programs. Be aware that there are programs which consult this file to find out if a user is a normal user; for example, FTP daemons traditionally disallow access to users with shells not included in this file.",
                "project": "CIA",
                "Check_Type": "nologin",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.3.2 Ensure default user shell timeout is configured",
                "Status" : "Done",
                "Description": "TMOUT is an environmental setting that determines the timeout of a shell in seconds.",
                "project": "CIA",
                "Check_Type": "default_timeout",
                "type": "Subtask"
              },
              {
                "Summary": "5.4.3.3 Ensure default user umask is configured",
                "Status" : "Done",
                "Description": "The user file-creation mode mask (umask) is used to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (rwxrwxrwx), and for any newly created file it is 0666 (rw-rw- rw-). The umask modifies the default Linux permissions by restricting (masking) these permissions. The umask is not simply subtracted, but is processed bitwise. Bits set in the umask are cleared in the resulting file mode.",
                "project": "CIA",
                "Check_Type": "default_umask",
                "type": "Subtask"
              }
            ]
          }
        ]
      }
    ]
  }
]
